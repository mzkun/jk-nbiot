package com.goldcard.nbiot.web.home.controller.device;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.text.MessageFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.io.FileUtils;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import com.alibaba.fastjson.JSON;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import com.goldcard.nbiot.common.enums.FunctionCodeEnum;import com.goldcard.nbiot.common.model.DeviceInfo;import com.goldcard.nbiot.common.model.NBUrl;import com.goldcard.nbiot.common.model.Platform;import com.goldcard.nbiot.common.util.PageBase;import com.goldcard.nbiot.manager.device.service.DeviceService;import com.goldcard.nbiot.manager.platform.service.PlatformService;import com.goldcard.nbiot.manager.redis.JedisCacheTools;import com.goldcard.nbiot.manager.url.service.NBUrlService;import com.goldcard.nbiot.manager.util.HttpClientUtil;import com.goldcard.nbiot.manager.util.HttpsClientUtil;import com.goldcard.nbiot.web.home.controller.common.ReturnMessage;@Controller@RequestMapping("deviceAction")public class DeviceController {		Logger log = LoggerFactory.getLogger(DeviceController.class);		@Autowired	private DeviceService deviceService;		@Autowired	private PlatformService platformService;		@Autowired	private NBUrlService nbUrlService;		//设备注册请求	@RequestMapping("/registerDevice")	@ResponseBody	public String registerDevice(String imei,String endUserId,String source){		Platform platform = (Platform) JedisCacheTools.getObjectFromJedis(source);		if (null == platform){			platform = platformService.getPlatformByCode(source);			//将平台信息添加到redis缓存中			JedisCacheTools.addObjectToJedis(source, platform, Platform.class, 0); 		}				Map<String, String> condition = getCondition(platform, source, FunctionCodeEnum.REGIST_DEVICE_URL.getCode());		String httpRespose = null;		//判断是否存在nodeId		boolean verifyCodeExists = deviceService.isImeiExists(imei);		if(!verifyCodeExists){			return "注册失败,表具（verifyCode）已存在";		}		String accessToken = JedisCacheTools.getStringFromJedis(condition.get("platformDes"));		String url = condition.get("url");		log.info("注册地址:" + url);		Map<String, String> paramsMap = new HashMap<>();		paramsMap.put("app_key", platform.getApp_key());		paramsMap.put("Authorization","Bearer " + accessToken);		Map<String, String> params = new HashMap<String, String>();//		paramsMap.put("content", "{\"verifyCode\":\""+imei+"\",\"nodeId\":\""+nodeId+"\",\"endUserId\":\""+endUserId+"\",\"timeout\":\""+timeout+"\"}");		params.put("verifyCode", imei);		params.put("nodeId", imei);		params.put("endUserId", endUserId);		params.put("timeout", "0");		try {			if ("http:".equals(url.substring(0, 5))){				//此处调用IOT注册设备接口,将接口返回数据返回前台页面				httpRespose = HttpClientUtil.doHttpPostReq(url, params, paramsMap);			} else if ("https".equals(url.substring(0, 5))){				HttpsClientUtil clientUtil = new HttpsClientUtil();            	clientUtil.initSSLConfigForTwoWay();				httpRespose = clientUtil.doHttpPostReq(url, params, paramsMap,"UTF-8");			}			log.info("注册设备IMEI号为"+imei+"接受到的响应是=========="+httpRespose);						if (null != httpRespose && !"".equals(httpRespose)){				ObjectMapper mapper = new ObjectMapper();  				Map<String, String> resMap = mapper.readValue(httpRespose, new TypeReference<HashMap<String,String>>(){});								if (resMap.containsKey("error_code")){					return resMap.get("error_desc");				} else if (resMap.containsKey("deviceId")){					DeviceInfo deviceInfo=new DeviceInfo();					SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssSSS");					deviceInfo.setId(format.format(new Date()));					deviceInfo.setDeviceId(resMap.get("deviceId"));					deviceInfo.setImei(resMap.get("verifyCode"));					deviceInfo.setPsk(resMap.get("psk"));					deviceInfo.setTimeout(resMap.get("timeout"));					deviceInfo.setPlatform(source);										deviceService.saveDevice(deviceInfo);					//将设备添加到缓存中					JedisCacheTools.addObjectToJedis(resMap.get("deviceId"), deviceInfo, DeviceInfo.class, 0);										return "注册成功!";				}			}		} catch (Exception e) {			e.printStackTrace();			return "注册失败，可刷新accessToken后重试!!";		}		return "注册失败，可刷新accessToken后重试!";	}		@RequestMapping("/getDeviceList")	@ResponseBody	public PageBase<DeviceInfo> getDeviceList(HttpServletRequest request) {		int page = Integer.parseInt(request.getParameter("page"));		int row = Integer.parseInt(request.getParameter("rows"));// 接受参数page和rows		String imei = null;		String platform = null;		if (!StringUtils.isEmpty(request.getParameter("imei"))) {			imei = request.getParameter("imei");		}		if (!StringUtils.isEmpty(request.getParameter("platform"))) {			platform = request.getParameter("platform");		}		return deviceService.selectByPage(platform, imei, page, row);	}		@RequestMapping("/setDeviceInfo")	@ResponseBody	public String setDeviceInfo(String deviceId, String manufacturerId, String deviceType,String protocolType,String model,String platform){		Platform plat = (Platform) JedisCacheTools.getObjectFromJedis(platform);		if (null == plat){			plat = platformService.getPlatformByCode(platform);			//将平台信息添加到redis缓存中			JedisCacheTools.addObjectToJedis(platform, plat, Platform.class, 0); 		}				Map<String, String> condition = getCondition(plat, platform, FunctionCodeEnum.SET_DEVICE_INFO_URL.getCode());				String setDeviceInfoURL = MessageFormat.format(condition.get("url"), deviceId, plat.getApp_key());		String accessToken = JedisCacheTools.getStringFromJedis(plat.getPlatformDes());		Map<String,String> map = new HashMap<String,String>();		map.put("manufacturerId", manufacturerId);		map.put("deviceType", deviceType);		map.put("protocolType", protocolType);		map.put("model", model);		Map<String, String> headerParam = new HashMap<String, String>();		headerParam.put("app_key",plat.getApp_key());		headerParam.put("Authorization","Bearer "+accessToken);				String httpRespose = null;		try {			if ("http:".equals(setDeviceInfoURL.substring(0, 5))){				httpRespose = HttpClientUtil.doHttpPut(setDeviceInfoURL, map, headerParam);			} else if ("https".equals(setDeviceInfoURL.substring(0, 5))){				HttpsClientUtil clientUtil = new HttpsClientUtil();            	clientUtil.initSSLConfigForTwoWay();				httpRespose = clientUtil.doHttpPut(setDeviceInfoURL, map, headerParam, "UTF-8");			}		} catch (Exception e) {			log.error("证书认证错误");			e.printStackTrace();		}		log.info("设置deviceId为"+deviceId+"的设备信息接受到的响应是=========="+httpRespose);		return "操作完成";	}		@RequestMapping("/loginIot")	@ResponseBody	public String loginIot(String code){				Platform platform = (Platform) JedisCacheTools.getObjectFromJedis(code);		if (null == platform){			platform = platformService.getPlatformByCode(code);			//将平台信息添加到redis缓存中			JedisCacheTools.addObjectToJedis(code, platform, Platform.class, 0); 		}				Map<String, String> condition = getCondition(platform, code, FunctionCodeEnum.LOGIN_URL.getCode());				String app_key = platform.getApp_key();		String secret = platform.getSecret();		String url = condition.get("url");		if (StringUtils.isEmpty(url)){			log.error("登录地址为空，刷新失败");			return "accessToken刷新失败!";		}		String content = "appId=" + app_key + "&secret=" + secret + "";		Map<String, String> map = new HashMap<String, String>();		map.put("appId", app_key);		map.put("secret", secret);		try {			String httpRespose = null;			if ("http:".equals(url.substring(0, 5))){				httpRespose = HttpClientUtil.doPost(url, content);			} else if ("https".equals(url.substring(0, 5))){				HttpsClientUtil clientUtil = new HttpsClientUtil();            	clientUtil.initSSLConfigForTwoWay();				httpRespose = clientUtil.doPost(url, map, "UTF-8");			}			log.info("刷新令牌后接受到的响应是=========="+httpRespose);			if (null != httpRespose && !"".equals(httpRespose)) {				ObjectMapper mapper = new ObjectMapper();  				Map<String, String> resMap = mapper.readValue(httpRespose, new TypeReference<HashMap<String,String>>(){});								String accessToken = null;				if (resMap.containsKey("accessToken")){					accessToken = resMap.get("accessToken");					//将令牌信息添加到缓存中					JedisCacheTools.addStringToJedis(platform.getPlatformDes(), accessToken, 0);				}				log.info("accessToken已刷新为======="+accessToken);			}		} catch (Exception e){			log.error("accessToken刷新失败!");			e.printStackTrace();			return "accessToken刷新失败!";		}		return "accessToken已刷新!";	}		@RequestMapping("/deleteDevice")	@ResponseBody	public String deleteDevice(String deviceId, String platform){		Platform plat = (Platform) JedisCacheTools.getObjectFromJedis(platform);		if (null == plat){			plat = platformService.getPlatformByCode(platform);			//将平台信息添加到redis缓存中			JedisCacheTools.addObjectToJedis(platform, plat, Platform.class, 0); 		}		Map<String, String> condition = getCondition(plat, platform, FunctionCodeEnum.DELETE_DEVICE_URL.getCode());				String appKey = plat.getApp_key();		String accessToken = JedisCacheTools.getStringFromJedis(plat.getPlatformDes());		String deleteDeviceUrl = MessageFormat.format(condition.get("url"), deviceId, appKey);		Map<String,String> headerParam=new HashMap<String,String>();		headerParam.put("app_key",appKey);		headerParam.put("Authorization","Bearer "+ accessToken);		String httpRespose = null;		try {			if ("http:".equals(deleteDeviceUrl.substring(0, 5))) {				httpRespose = HttpClientUtil.doHttpDelete(deleteDeviceUrl, headerParam);			} else if ("https".equals(deleteDeviceUrl.substring(0, 5))) {				HttpsClientUtil clientUtil = new HttpsClientUtil();            	clientUtil.initSSLConfigForTwoWay();				httpRespose = clientUtil.doHttpDelete(deleteDeviceUrl, headerParam, "UTF-8");			}			log.info("删除deviceId为" + deviceId + "接受到的响应是==========" + httpRespose);			if (httpRespose == null) {				//将缓存中的设备删除				JedisCacheTools.delKeyFromJedis(deviceId);				deviceService.deleteDeviceByDeviceId(deviceId);				httpRespose = "删除设备成功！";			} else {				ObjectMapper mapper = new ObjectMapper();  				Map<String, String> productMap = mapper.readValue(httpRespose, new TypeReference<HashMap<String,String>>(){});				//将缓存中的设备删除				JedisCacheTools.delKeyFromJedis(deviceId);				deviceService.deleteDeviceByDeviceId(deviceId);				httpRespose = productMap.get("error_desc");			}		} catch (Exception e) {			log.error("证书认证错误");			e.printStackTrace();		}		return httpRespose;	}		/**	 * 订阅变更（此方法暂时不使用）	 * @param notifyType	 * @param callBackUrl	 * @return	 */	@RequestMapping("/subscribeChange")	@ResponseBody	public String subscribeChange(String notifyType, String callBackUrl, String source){		Platform platform = (Platform) JedisCacheTools.getObjectFromJedis(source);		if (null == platform){			platform = platformService.getPlatformByCode(source);			//将平台信息添加到redis缓存中			JedisCacheTools.addObjectToJedis(source, platform, Platform.class, 0); 		}		Map<String, String> condition = getCondition(platform, source, FunctionCodeEnum.SUBSCRIBE_CHANGE_URL.getCode());				String accessToken = JedisCacheTools.getStringFromJedis(platform.getPlatformDes());		String appKey = platform.getApp_key();		String subscribeChangeUrl = condition.get("url");		Map<String, String> headerParam = new HashMap<String,String>();		headerParam.put("app_key", appKey);		headerParam.put("Authorization","Bearer " + accessToken);		Map<String, String> params = new HashMap<String, String>();		params.put("notifyType", notifyType);		params.put("callbackurl", callBackUrl);		String httpRespose = null;		try {			if ("http:".equals(subscribeChangeUrl.substring(0, 5))) {				httpRespose = HttpClientUtil.doHttpPostReq(subscribeChangeUrl, params, headerParam);			} else if ("https".equals(subscribeChangeUrl.substring(0, 5))) {				HttpsClientUtil clientUtil = new HttpsClientUtil();            	clientUtil.initSSLConfigForTwoWay();				httpRespose = clientUtil.doHttpPostReq(subscribeChangeUrl, params, headerParam, "UTF-8");			}			log.info("订阅设备变更" + notifyType + "接受到的响应是==========" + httpRespose);			if (httpRespose == null || "".equals(httpRespose)) {				httpRespose = "订阅成功，" + notifyType + "回调地址为：" + callBackUrl;			} else {				ObjectMapper mapper = new ObjectMapper();  				Map<String, String> productMap = mapper.readValue(httpRespose, new TypeReference<HashMap<String,String>>(){});				httpRespose = productMap.get("error_desc");			}		} catch (Exception e) {			log.error("证书认证错误");			e.printStackTrace();		}		return httpRespose;			}		//查询设备激活状态	@RequestMapping("/searchDeviceStatus")	@ResponseBody	public String searchDeviceStatus(String deviceId, String platform){		Platform plat = (Platform) JedisCacheTools.getObjectFromJedis(platform);		if (null == plat){			plat = platformService.getPlatformByCode(platform);			//将平台信息添加到redis缓存中			JedisCacheTools.addObjectToJedis(platform, plat, Platform.class, 0); 		}		Map<String, String> condition = getCondition(plat, platform, FunctionCodeEnum.SEARCH_DEVICE_STATUS_URL.getCode());				String appKey = plat.getApp_key();		String accessToken = JedisCacheTools.getStringFromJedis(plat.getPlatformDes());		String searchDeviceStatusUrl = MessageFormat.format(condition.get("url"), deviceId, appKey);		Map<String,String> headerParam=new HashMap<String,String>();		headerParam.put("app_key",appKey);		headerParam.put("Authorization","Bearer "+ accessToken);		String httpRespose = null;		try {			if ("http:".equals(searchDeviceStatusUrl.substring(0, 5))) {				//httpRespose = HttpClientUtil.doGet(searchDeviceStatusUrl, headerParam);			} else if ("https".equals(searchDeviceStatusUrl.substring(0, 5))) {				HttpsClientUtil clientUtil = new HttpsClientUtil();            	clientUtil.initSSLConfigForTwoWay();				httpRespose = clientUtil.doGet(searchDeviceStatusUrl, headerParam, "UTF-8");			}			log.info("查询设备" + deviceId + "激活状态接受到的响应是==========" + httpRespose);			if (httpRespose == null) {				httpRespose = "查询失败！";			} else {				ObjectMapper mapper = new ObjectMapper();  				Map<String, String> productMap = mapper.readValue(httpRespose, new TypeReference<HashMap<String,String>>(){});				if(productMap.containsKey("error_code")){					return productMap.get("error_desc");				}				if (null != productMap.get("activated") && "true".equals(productMap.get("activated"))) {					httpRespose = "设备" + deviceId + "已激活";				} else if (null != productMap.get("activated") && "false".equals(productMap.get("activated"))){					httpRespose = "设备" + deviceId + "未激活";				}			}		} catch (Exception e) {			log.error("证书认证错误");			e.printStackTrace();		}		return httpRespose;	}		/**	 * 批量注册（对外接口）	 * @param	 */	@RequestMapping("/batchRegist")	@ResponseBody	public void batchRegist(List<String> imeis,String factory){		log.info("远程调用批量注册请求-------begin----------");		for(String s : imeis){			registDevice(s,factory);		}		log.info("远程调用批量注册请求-------end----------");	}		/**	 * 单个注册	 * @param imei	 * @return	 */	@RequestMapping("/singleRegist")	@ResponseBody	public String singleRegist(String imei,String factory){		log.info("远程调用单个注册请求-------begin----------");		ReturnMessage messge= registDevice(imei,factory);		log.info("远程调用单个注册请求-------end----------");		return JSON.toJSON(messge).toString();	}		/**	 * 批量导入	 * @param platform	 * @param filePath	 * @return	 */	@RequestMapping(value="/registerBatch", method=RequestMethod.POST)	@ResponseBody	public String batchRegister(String source, MultipartFile file, HttpServletRequest request) {				log.info("批量注册设备---------begin----------");		BufferedReader reader = null;		if (!file.isEmpty()){			try {				String realPath = request.getSession().getServletContext().getRealPath("/WEB-INF/upload");  				FileUtils.copyInputStreamToFile(file.getInputStream(), new File(realPath, file.getOriginalFilename()));				File temp = new File(realPath + "/" + file.getOriginalFilename());				reader = new BufferedReader(new FileReader(temp));				String imei = null;				while ((imei = reader.readLine()) != null) {					registDevice(imei, source);				}				reader.close();			} catch (IOException e) {				e.printStackTrace();			}  finally {				if (null != reader) {					try {						reader.close();					} catch (IOException e) {						e.printStackTrace();					}				}			}		}		log.info("批量注册设备---------end----------");		return "导入完成 ";	}			public ReturnMessage registDevice(String imei,String factory){				ReturnMessage returnMessage = new ReturnMessage();		if(StringUtils.isEmpty(imei)){			returnMessage.setCode("10001010");			returnMessage.setMessage("Imei号不能为空");			log.error("Imei号不能为空");			return returnMessage;		}		if(StringUtils.isEmpty(factory)){			returnMessage.setCode("10001011	");			returnMessage.setMessage("厂商标识不能为空");			log.error("厂商标识不能为空");			return returnMessage;		}		String httpRespose = null;		//判断是否存在nodeId		boolean verifyCodeExists = deviceService.isImeiExists(imei);		if(!verifyCodeExists){			returnMessage.setCode("10002010");			returnMessage.setMessage("imei号已注册");			log.error("imei号已注册");			return returnMessage;		}				Platform platform = (Platform) JedisCacheTools.getObjectFromJedis(factory);		if (null == platform){			platform = platformService.getPlatformByCode(factory);			//将平台信息添加到redis缓存中			JedisCacheTools.addObjectToJedis(factory, platform, Platform.class, 0); 		}		Map<String, String> condition = getCondition(platform, factory, FunctionCodeEnum.REGIST_DEVICE_URL.getCode());				String accessToken = JedisCacheTools.getStringFromJedis(platform.getPlatformDes());		String appKey = platform.getApp_key();		String registDeviceURL = condition.get("url");		log.info("注册地址:" + registDeviceURL);		Map<String, String> paramsMap=new HashMap<>();		paramsMap.put("app_key", appKey);		paramsMap.put("Authorization","Bearer " + accessToken);		Map<String, String> params = new HashMap<String, String>();//		paramsMap.put("content", "{\"verifyCode\":\""+imei+"\",\"nodeId\":\""+nodeId+"\",\"endUserId\":\""+endUserId+"\",\"timeout\":\""+timeout+"\"}");		params.put("verifyCode", imei);		params.put("nodeId", imei);		params.put("endUserId", imei);		params.put("timeout", "0");		try {			if ("http:".equals(registDeviceURL.substring(0, 5))){				//此处调用IOT注册设备接口,将接口返回数据返回前台页面				httpRespose = HttpClientUtil.doHttpPostReq(registDeviceURL, params, paramsMap);			} else if ("https".equals(registDeviceURL.substring(0, 5))){				HttpsClientUtil clientUtil = new HttpsClientUtil();            	clientUtil.initSSLConfigForTwoWay();				httpRespose = clientUtil.doHttpPostReq(registDeviceURL, params, paramsMap,"UTF-8");			}			log.info("注册设备IMEI号为"+imei+"接受到的响应是=========="+httpRespose);						if (null != httpRespose && !"".equals(httpRespose)){				ObjectMapper mapper = new ObjectMapper();  				Map<String, String> resMap = mapper.readValue(httpRespose, new TypeReference<HashMap<String,String>>(){});								if (resMap.containsKey("error_code")){					returnMessage.setCode(resMap.get("error_code"));					returnMessage.setMessage(resMap.get("error_desc"));					return returnMessage;				} else if (resMap.containsKey("deviceId")){					DeviceInfo deviceInfo=new DeviceInfo();					SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssSSS");					deviceInfo.setId(format.format(new Date()));					deviceInfo.setDeviceId(resMap.get("deviceId"));					deviceInfo.setImei(resMap.get("verifyCode"));					deviceInfo.setPsk(resMap.get("psk"));					deviceInfo.setTimeout(resMap.get("timeout"));					deviceInfo.setPlatform(factory);										deviceService.saveDevice(deviceInfo);										//设置设备信息					String manufacturerId = "JK-300349";					String deviceType = "GasMeter";					String protocolType = "CoAP";					String model = "JW-G2.5";										setDeviceInfo(resMap.get("deviceId"), manufacturerId, deviceType, protocolType, model, factory);										returnMessage.setCode("0");					returnMessage.setMessage("注册成功");					log.info("注册设备IMEI号为"+imei+"注册成功");					return returnMessage;				}			}		} catch (Exception e) {			e.printStackTrace();			returnMessage.setCode("1");			returnMessage.setMessage("注册失败，可刷新accessToken后重试!!");			log.error("注册失败，可刷新accessToken后重试!!");			return returnMessage;		}		returnMessage.setCode("1");		returnMessage.setMessage("注册失败，可刷新accessToken后重试!!");		log.error("注册失败，可刷新accessToken后重试!!");		return returnMessage;			}	    /**     * 获取条件     * @param platform     * @param code     * @param funCode     * @return     */	private Map<String, String> getCondition(Platform platform, String code, String funCode){		Map<String, String> condition = new HashMap<String, String>();		String platformDes = platform.getPlatformDes();		condition.put("platformDes", platformDes);				NBUrl nbUrl = (NBUrl) JedisCacheTools.getObjectFromJedis(platformDes+funCode);		if (null == nbUrl) {			List<NBUrl> nbUrls = nbUrlService.getUrlByPlatform(code);						for(int i = 0; i < nbUrls.size(); i++) {				if (funCode.equals(nbUrls.get(i).getFun_code())){					nbUrl = nbUrls.get(i);					//将平台信息添加到redis缓存中					JedisCacheTools.addObjectToJedis(platformDes+nbUrl.getFun_code(), nbUrl, NBUrl.class, 0); 				}			}		}		if (null != nbUrl) {			condition.put("url", nbUrl.getUrl());		} else {			log.error("【DeviceController】接口地址不存在");			condition.put("url", null);		}		return condition;	}	@RequestMapping("/deviceCapabilities")	@ResponseBody	public String getDeviceCapabilities(String platform, String deviceId) {		Platform plat = (Platform) JedisCacheTools.getObjectFromJedis(platform);		if (null == plat){			plat = platformService.getPlatformByCode(platform);			//将平台信息添加到redis缓存中			JedisCacheTools.addObjectToJedis(platform, plat, Platform.class, 0);		}		Map<String, String> condition = getCondition(plat, platform, FunctionCodeEnum.SEARCH_DEVICE_CAPABILITIES_URL.getCode());		String appKey = plat.getApp_key();		String accessToken = JedisCacheTools.getStringFromJedis(plat.getPlatformDes());		String searchDeviceCapabilitiesUrl = MessageFormat.format(condition.get("url"), deviceId, appKey);		Map<String,String> headerParam=new HashMap<String,String>();		headerParam.put("app_key",appKey);		headerParam.put("Authorization","Bearer "+ accessToken);		String httpRespose = null;		try {			if ("http:".equals(searchDeviceCapabilitiesUrl.substring(0, 5))) {				//httpRespose = HttpClientUtil.doGet(searchDeviceStatusUrl, headerParam);			} else if ("https".equals(searchDeviceCapabilitiesUrl.substring(0, 5))) {				HttpsClientUtil clientUtil = new HttpsClientUtil();				clientUtil.initSSLConfigForTwoWay();				httpRespose = clientUtil.doGet(searchDeviceCapabilitiesUrl, headerParam, "UTF-8");			}			log.info("查询设备" + deviceId + "能力接受到的响应是==========" + httpRespose);			if (httpRespose == null) {				httpRespose = "查询失败！";			} else {				ObjectMapper mapper = new ObjectMapper();				Map<String, String> productMap = mapper.readValue(httpRespose, new TypeReference<HashMap<String,String>>(){});				if(productMap.containsKey("error_code")){					return productMap.get("error_desc");				}				/*if (null != productMap.get("activated") && "true".equals(productMap.get("activated"))) {					httpRespose = "设备" + deviceId + "已激活";				} else if (null != productMap.get("activated") && "false".equals(productMap.get("activated"))){					httpRespose = "设备" + deviceId + "未激活";				}*/			}		} catch (Exception e) {			log.error("证书认证错误");			e.printStackTrace();		}		return httpRespose;	}}